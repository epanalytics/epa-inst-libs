CC          = @CC@
CXX         = @CXX@
FC          = @FC@
MPICC       = @MPICC@

BINDIR      = ../../src
SCRIPT_DIR	= ../scripts

NPB_SER_APPS  = cg mg ep
NPB_SER_CLASSES = S
NPB_OMP_APPS  = cg mg ep
NPB_OMP_CLASSES = S

IDE_SCRIPT	= $(SCRIPT_DIR)/testIDE.sh
JBB_SCRIPT	= $(SCRIPT_DIR)/testJBB.sh
SIM_SCRIPT	= $(SCRIPT_DIR)/testSIM.sh

NPB_SER_EXEC			= NPB3.3-SER/bin
NPB_SER_TARGETS   = $(foreach serApp,$(NPB_SER_APPS),$(foreach class,$(NPB_SER_CLASSES),$(NPB_SER_EXEC)/$(serApp).$(class)))

NPB_OMP_EXEC			= NPB3.3-OMP/bin
NPB_OMP_TARGETS   = $(foreach ompApp,$(NPB_OMP_APPS),$(foreach class,$(NPB_OMP_CLASSES),$(NPB_OMP_EXEC)/$(ompApp).$(class)))

LOOPS_FILE        = all.loops
CREATE_LOOPS_FILE = echo "*:*:0" > $(LOOPS_FILE)
NULL_FILE = /dev/null

all: make_NPB_SER make_NPB_OMP

### Make Targets
make_NPB_SER:
	cp NPB3.3-SER/config/make.def.epanalytics NPB3.3-SER/config/make.def
	sed -i 's/EPA_FC/'$(FC)'/g' NPB3.3-SER/config/make.def
	sed -i 's/EPA_CC/'$(CC)'/g' NPB3.3-SER/config/make.def
	for app in $(NPB_SER_APPS) ; do \
		for class in $(NPB_SER_CLASSES) ; do \
			make $$app CLASS=$$class -C NPB3.3-SER ; \
	done done

make_NPB_OMP:
	cp NPB3.3-OMP/config/make.def.epanalytics NPB3.3-OMP/config/make.def
	#sed -i 's/EPA_FC/'$(FC)'/g' NPB3.3-OMP/config/make.def
	#sed -i 's/EPA_CC/'$(CC)'/g' NPB3.3-OMP/config/make.def
	#sed -i 's/EPA_FFLAGS/\-fopenmp/g' NPB3.3-OMP/config/make.def
	#sed -i 's/EPA_CFLAGS/\-fopenmp/g' NPB3.3-OMP/config/make.def
	sed -i 's/EPA_FC/ifort/g' NPB3.3-OMP/config/make.def
	sed -i 's/EPA_CC/icc/g' NPB3.3-OMP/config/make.def
	sed -i 's/EPA_FFLAGS/\-openmp/g' NPB3.3-OMP/config/make.def
	sed -i 's/EPA_CFLAGS/\-openmp/g' NPB3.3-OMP/config/make.def
	for app in $(NPB_OMP_APPS) ; do \
		for class in $(NPB_OMP_CLASSES) ; do \
			make $$app CLASS=$$class -C NPB3.3-OMP ; \
	done done

### PEBIL Checks

check: make_NPB_SER make_NPB_OMP checkAppBinary

checkAppBinary: checkAppBinary_NPB_OMP checkAppBinary_NPB_SER

checkAppBinary_NPB_SER: $(NPB_SER_TARGETS) checkIDE_Binary_NPB_SER checkJBB_Binary_NPB_SER checkSIM_Binary_NPB_SER

checkAppBinary_NPB_OMP: $(NPB_OMP_TARGETS) checkIDE_Binary_NPB_OMP checkJBB_Binary_NPB_OMP checkSIM_Binary_NPB_OMP


checkIDE_Binary_NPB_SER: $(NPB_SER_TARGETS)
	set -e; \
	$(foreach target,$(NPB_SER_TARGETS), \
		TEST_CHECK=INST_AND_RUN \
			$(IDE_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(IDE_SCRIPT) $(notdir $(target)) $(dir $(target)); )

checkJBB_Binary_NPB_SER: $(NPB_SER_TARGETS)
	set -e; \
	$(foreach target,$(NPB_SER_TARGETS), \
		TEST_CHECK=INST_AND_RUN \
			$(JBB_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(JBB_SCRIPT) $(notdir $(target)) $(dir $(target)); )

checkSIM_Binary_NPB_SER: $(NPB_SER_TARGETS)
	set -e; \
	$(foreach target,$(NPB_SER_TARGETS), \
		TEST_CHECK=INST_AND_RUN INPUT_DEV_NULL=1 \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=INST_AND_RUN \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); )

checkIDE_Binary_NPB_OMP: $(NPB_OMP_TARGETS)
	set -e; \
	$(foreach target,$(NPB_OMP_TARGETS), \
		TEST_CHECK=INST_AND_RUN \
			$(IDE_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(IDE_SCRIPT) $(notdir $(target)) $(dir $(target)); )

checkJBB_Binary_NPB_OMP: $(NPB_OMP_TARGETS)
	set -e; \
	$(foreach target,$(NPB_OMP_TARGETS), \
		TEST_CHECK=INST_AND_RUN USING_OMP=1 \
			$(JBB_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(JBB_SCRIPT) $(notdir $(target)) $(dir $(target)); )

checkSIM_Binary_NPB_OMP: $(NPB_OMP_TARGETS)
	set -e; \
	$(foreach target,$(NPB_OMP_TARGETS), \
		TEST_CHECK=INST_AND_RUN INPUT_DEV_NULL=1 USING_OMP=1 \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=INST_AND_RUN USING_OMP=1 \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); \
		TEST_CHECK=CHECK_BIN_OUTPUT PROGRAM_SUCCESS="Verification" \
			$(SIM_SCRIPT) $(notdir $(target)) $(dir $(target)); )


#$(NPB_SER_EXEC)/%.ideinst: $(NPB_SER_EXEC)/%
#	$(PEBIL_COMMAND_I) ide --app $<
#	$(DIFF) $< $@
#	./$@ | $(FILTER_NPB_SUCCESS) > $@.$(OUT)
#	./$< | $(FILTER_NPB_SUCCESS) > $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#$(NPB_SER_EXEC)/%.jbbinst: $(NPB_SER_EXEC)/%
#	$(PEBIL_COMMAND_T) BasicBlockCounter --app $<
#	./$@ | $(FILTER_PEBIL_MSGS) | $(FILTER_NPB_SUCCESS) > $@.$(OUT)
#	./$<  | $(FILTER_NPB_SUCCESS)> $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#$(NPB_SER_EXEC)/%.siminst: $(NPB_SER_EXEC)/%
#	$(PEBIL_COMMAND_T) CacheSimulation --app $< --inp $(NULL_FILE)
#	./$@ | $(FILTER_PEBIL_MSGS)  | $(FILTER_NPB_SUCCESS)> $@.$(OUT)
#	./$<  | $(FILTER_NPB_SUCCESS)> $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#$(NPB_SER_EXEC)/%.lpiinst: $(NPB_SER_EXEC)/%
#	$(CREATE_LOOPS_FILE)
#	$(PEBIL_COMMAND_T) LoopIntercept --app $< --inp $(LOOPS_FILE) --lnc liblooptimer.so
#	rm -f $(LOOPS_FILE)
#	./$@ | $(FILTER_PEBIL_MSGS)  | $(FILTER_NPB_SUCCESS)> $@.$(OUT)
#	./$<  | $(FILTER_NPB_SUCCESS)> $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#	
#$(NPB_OMP_EXEC)/%.ideinst: $(NPB_OMP_EXEC)/%
#	$(PEBIL_COMMAND_I) ide --app $<
#	$(DIFF) $< $@
#	./$@ | $(FILTER_NPB_SUCCESS) > $@.$(OUT)
#	./$< | $(FILTER_NPB_SUCCESS) > $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#$(NPB_OMP_EXEC)/%.jbbinst: $(NPB_OMP_EXEC)/%
#	$(PEBIL_COMMAND_T) BasicBlockCounter --threaded --app $<
#	./$@  | $(FILTER_PEBIL_MSGS) | $(FILTER_NPB_SUCCESS) > $@.$(OUT)
#	./$<  | $(FILTER_NPB_SUCCESS)> $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#$(NPB_OMP_EXEC)/%.siminst: $(NPB_OMP_EXEC)/%
#	$(PEBIL_COMMAND_T) CacheSimulation --threaded --app $< --inp $(NULL_FILE)
#	./$@ | $(FILTER_PEBIL_MSGS)  | $(FILTER_NPB_SUCCESS)> $@.$(OUT)
#	./$<  | $(FILTER_NPB_SUCCESS)> $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)
#
#$(NPB_OMP_EXEC)/%.lpiinst: $(NPB_OMP_EXEC)/%
#	$(CREATE_LOOPS_FILE)
#	$(PEBIL_COMMAND_T) LoopIntercept --app $< --inp $(LOOPS_FILE) --lnc liblooptimer.so
#	rm -f $(LOOPS_FILE)
#	./$@ | $(FILTER_PEBIL_MSGS)  | $(FILTER_NPB_SUCCESS)> $@.$(OUT)
#	./$<  | $(FILTER_NPB_SUCCESS)> $<.$(OUT)
#	$(DIFF) $<.$(OUT) $@.$(OUT)


clean: 
	make clean -C NPB3.3-SER
	make clean -C NPB3.3-OMP
	rm $(NPB_SER_EXEC)/*
	rm $(NPB_OMP_EXEC)/*
	
