STATIC_INST_LIB  = @STATIC_INST_LIB@

PEBIL_LIBS = 
ifeq ($(STATIC_INST_LIB),yes)
	PEBIL_LIBS = libcounter.a  libsimulator.a  libtimer.a  libpower.a
else
	PEBIL_LIBS = libcounter.so libsimulator.so libtimer.so libpower.so
endif

LIB_TARGETS = $(PEBIL_LIBS)
MPICC       = @MPICC@
CFLAGS      = @CFLAGS@

SHARED_OPT  = -fPIC
EXTRA_FLAGS = -w $(SHARED_OPT)
SHARED_LIB  = -shared
AR          = ar rcs

#### -DNO_SAMPLING_MODE    : Add to disable sampling (note that MAX visit count is still on).
#### -DEXTENDED_SAMPLING   : Add to vary the ignore and sampling intervals during sampling
#### -DFINE_GRAIN_SAMPLING : Add to increase the granularity of sampling. Smaller intervals.
#### -DPER_SET_RECENT      : Add to simulcate LRU using per set most recent entry for replacement
#EXTRA_DEF = -DNO_SAMPLING_MODE -DPER_SET_RECENT -DSHIFT_ADDRESS_BUFFER @MPI_FLAGS@ # default for MultiMAPS tracing
EXTRA_DEF = -DEXTENDED_SAMPLING -DPER_SET_RECENT -DSHIFT_ADDRESS_BUFFER @MPI_FLAGS@ # default for application tracing
#EXTRA_DEF = -DIGNORE_ACTUAL_SIMULATION -DNO_SAMPLING_MODE -DPER_SET_RECENT -DSHIFT_ADDRESS_BUFFER @MPI_FLAGS@ # no simulation

EXTRA_LIBS  =
EXTRA_INC   = -I../instcode

LIBDIR      = ../lib
BINDIR      = ../bin

COMMON_OBJS = InstrumentationCommon.o

all: $(LIB_TARGETS)

%.o: %.c
	$(MPICC) $(CFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)

libcounter.so : CounterFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ CounterFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS)
libcounter.a : CounterFunctions.o $(COMMON_OBJS)
	$(AR) $@ CounterFunctions.o $(COMMON_OBJS)

libsimulator.so : Simulation.o CacheSimulationCommon.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ Simulation.o CacheSimulationCommon.o $(COMMON_OBJS) $(EXTRA_LIBS)
libsimulator.a : Simulation.o CacheSimulationCommon.o $(COMMON_OBJS)
	$(AR) $@ Simulation.o CacheSimulationCommon.o $(COMMON_OBJS)

libtimer.so : TimerFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ TimerFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS)
libtimer.a : TimerFunctions.o $(COMMON_OBJS) 
	$(AR) $@ TimerFunctions.o $(COMMON_OBJS)

libpower.so : PowerFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ PowerFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS)
libpower.a : PowerFunctions.o $(COMMON_OBJS) 
	$(AR) $@ PowerFunctions.o $(COMMON_OBJS)

clean: 
	rm -f *.o *.i *.s *.ii *.a *.so $(LIB_TARGETS)

install:
	cp $(LIB_TARGETS) $(LIBDIR)
