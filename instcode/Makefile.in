#/* 
# * This file is part of the pebil project.
# * 
# * Copyright (c) 2010, University of California Regents
# * All rights reserved.
# * 
# * This program is free software: you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation, either version 3 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program.  If not, see <http://www.gnu.org/licenses/>.
# */

STATIC_INST_LIB  = @PEBIL_STATIC_BUILD@
ADAMANT_LIBS_BUILD = @ADAMANT_LIBS_BUILD@
EPA_TOOLS_AVAILABLE = @PEBIL_EPA_TOOLS_AVAILABLE@
EPA_TOOLS_PATH = @PEBIL_SUBDIR_EPA_TOOLS_PATH@
PEBIL_PAPI_BUILD = @PEBIL_PAPI_BUILD@
PAPI_PATH = @PAPI_PATH@
PEBIL_LIBS = 
ifeq ($(STATIC_INST_LIB),yes)
	PEBIL_LIBS = libtimer.a  libclassifier.a  libpfreq.a  libtautrace.a  libcounter.a 
	ifeq ($(PEBIL_PAPI_BUILD),yes)
		PEBIL_LIBS += libpapiinst.a libpapifunc.a
	endif
else
	PEBIL_LIBS = libpebilruntime.so libtimer.so libclassifier.so libpfreq.so libtautrace.so liblooptimer.so libcounter.so libaddressstream.so
	ifeq ($(PEBIL_PAPI_BUILD),yes)
		PEBIL_LIBS += libpapiinst.so libpapifunc.so
	endif
endif

LIBDIR      = ../lib
BINDIR      = ../bin

LIB_TARGETS = $(foreach pebil_lib,$(PEBIL_LIBS),$(LIBDIR)/$(pebil_lib))
MPICC       = @MPICC@
MPICXX      = @MPICXX@
CFLAGS      = @CFLAGS@ @MPI_FLAGS@ @CPUFREQ_FLAGS@ @ADAMANT_HEADER_FLAGS@  @THROTTLER_FLAGS@ @PEBIL_DEBUG@ -w
CXXFLAGS    = @CXXFLAGS@ @MPI_CXXFLAGS@ @MPI_FLAGS@ @CPUFREQ_FLAGS@ @ADAMANT_HEADER_FLAGS@  @THROTTLER_FLAGS@ @PEBIL_DEBUG@ -w

ALL_TARGETS	=	$(LIB_TARGETS)

SHARED_OPT  = -fPIC
EXTRA_FLAGS = $(SHARED_OPT)
SHARED_LIB  = -shared
AR          = ar rcs

REUSE_LIBS  = -L../instcode/ReuseDistance -lReuseDistance
EXTRA_INC   = -I../instcode -I../instcode/ReuseDistance

ifeq ($(PEBIL_PAPI_BUILD),yes)
	EXTRA_INC += -I$(PAPI_PATH)/include
endif

COMMON_OBJS = $(LIBDIR)/InstrumentationCommon.o
SHARED_COMMON_OBJS = $(LIBDIR)/InstrumentationCommon.O $(LIBDIR)/ThreadedCommon.O $(LIBDIR)/DynamicInstrumentation.O

ASL_OBJS = $(LIBDIR)/AddressStreamBase.O $(LIBDIR)/AddressRange.O $(LIBDIR)/CacheSimulation.O $(LIBDIR)/ReuseDistanceASI.O $(LIBDIR)/ScatterGatherLength.O $(LIBDIR)/SpatialLocality.O $(LIBDIR)/AddressStreamDriver.O

ifeq ($(EPA_TOOLS_AVAILABLE),yes)
  ASL_OBJS += $(EPA_TOOLS_PATH)/instcode/PrefetchSimulation.o
  ASL_OBJS += $(EPA_TOOLS_PATH)/instcode/SpatialLocalityPerMemOp.o
  EXTRA_FLAGS += -DHAS_EPA_TOOLS
  EXTRA_INC += -I$(EPA_TOOLS_PATH)/instcode
endif

ifeq ($(ADAMANT_LIBS_BUILD),yes)
	EXTRA_LIBS = -ldl -lpthread -ladm
else
	EXTRA_LIBS = -ldl -lpthread
endif

# opempi does not automatically link fortran mpi
ifeq ($(MPICC), mpicc)
  MPITYPE := "$(shell mpirun --version 2>&1 | grep "Open MPI")"
  # If using openmpi
  ifneq ($(MPITYPE), "")
	  EXTRA_LIBS += @PEBIL_MPIFC_OPENMPI_LIB@
  endif
endif

all: $(ALL_TARGETS)

$(LIBDIR)/%.o: %.c
	$(MPICC) $(CFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)
$(LIBDIR)/%.O: %.cpp
	$(MPICXX) $(CXXFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)

$(LIBDIR)/libpebilruntime.so : $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)

$(LIBDIR)/libcounter.so : $(LIBDIR)/CounterFunctions.O $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(LIBDIR)/libcounter.a : $(LIBDIR)/CounterFunctions.o $(COMMON_OBJS)
	$(AR) $@ $(LIBDIR)/CounterFunctions.o $(COMMON_OBJS)

$(LIBDIR)/libaddressstream.so : $(LIBDIR)/AddressStreamLibrary.O $(ASL_OBJS) $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(REUSE_LIBS) $(CXXFLAGS)

$(LIBDIR)/liblooptimer.so : $(LIBDIR)/LoopTimer.O $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)

$(LIBDIR)/libfrequencyconfig.so : $(LIBDIR)/FrequencyConfig.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)

$(LIBDIR)/libpapiinst.so : $(LIBDIR)/PAPIInst.O $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)

$(LIBDIR)/libtimer.so : $(LIBDIR)/TimerFunctions.O $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)
$(LIBDIR)/libtimer.a : $(LIBDIR)/TimerFunctions.o $(COMMON_OBJS) 
	$(AR) $@ $(LIBDIR)/TimerFunctions.o $(COMMON_OBJS)

$(LIBDIR)/libpapifunc.so : $(LIBDIR)/PAPIFunc.O $(SHARED_COMMON_OBJS)
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS) $(CXXFLAGS)

$(LIBDIR)/libclassifier.so : $(LIBDIR)/ClassifierFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ $(LIBDIR)/ClassifierFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS) $(CFLAGS)
$(LIBDIR)/libclassifier.a : $(LIBDIR)/ClassifierFunctions.o
	$(AR) $@ $(LIBDIR)/ClassifierFunctions.o

$(LIBDIR)/libpfreq.so : $(LIBDIR)/Frequency.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ $(LIBDIR)/Frequency.o $(COMMON_OBJS) $(EXTRA_LIBS) $(CFLAGS)
$(LIBDIR)/libpfreq.a : $(LIBDIR)/Frequency.o
	$(AR) $@ $(LIBDIR)/Frequency.o

$(LIBDIR)/libtautrace.so : $(LIBDIR)/tautrace.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ $(LIBDIR)/tautrace.o $(COMMON_OBJS) $(EXTRA_LIBS) $(CFLAGS)
$(LIBDIR)/libtautrace.a : $(LIBDIR)/tautrace.o
	$(AR) $@ $(LIBDIR)/tautrace.o

clean: 
	rm -f $(LIBDIR)/*.o $(LIBDIR)/*.O $(LIBDIR)/*.i $(LIBDIR)/*.s $(LIBDIR)/*.ii $(ALL_TARGETS)

install:
	echo "Nothing to install in instcode"
	#cp $(LIB_TARGETS) $(LIBDIR)

