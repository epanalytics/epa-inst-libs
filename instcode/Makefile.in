STATIC_INST_LIB  = @STATIC_INST_LIB@
PEBIL_LIBS = 
ifeq ($(STATIC_INST_LIB),yes)
	PEBIL_LIBS = libtimer.a  libclassifier.a  libpfreq.a  libtautrace.a  liblptimer.a  libcounter.a  libsimulator.a
else
	PEBIL_LIBS = libtimer.so libclassifier.so libpfreq.so libtautrace.so liblptimer.so libcounter.so libsimulator.so
endif

LIB_TARGETS = $(PEBIL_LIBS)
MPICC       = @MPICC@
MPICXX      = @MPICXX@
CFLAGS      = @CFLAGS@ @MPI_FLAGS@ @CPUFREQ_FLAGS@ @THROTTLER_FLAGS@ -w
CXXFLAGS    = @CXXFLAGS@ @MPI_FLAGS@ @CPUFREQ_FLAGS@ @THROTTLER_FLAGS@ -w

SHARED_OPT  = -fPIC
EXTRA_FLAGS = $(SHARED_OPT)
SHARED_LIB  = -shared -ldl
AR          = ar rcs

EXTRA_LIBS  =
EXTRA_INC   = -I../instcode

LIBDIR      = ../lib
BINDIR      = ../bin

COMMON_OBJS = InstrumentationCommon.o

all: $(LIB_TARGETS)

%.o: %.c
	$(MPICC) $(CFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)
%.O: %.cpp
	$(MPICXX) $(CXXFLAGS) $(EXTRA_FLAGS) $(EXTRA_DEF) $(EXTRA_INC) -c -o $@ $< $(SHARED_OPT)

libcounter.so : CounterFunctions.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS)
libcounter.a : CounterFunctions.o $(COMMON_OBJS)
	$(AR) $@ CounterFunctions.o $(COMMON_OBJS)

libsimulator.so : Simulation.O
	$(MPICXX) $(SHARED_LIB) -o $@ $^ $(EXTRA_LIBS)
libsimulator.a : Simulation.o CacheSimulationCommon.o $(COMMON_OBJS)
	$(AR) $@ Simulation.o CacheSimulationCommon.o $(COMMON_OBJS)

libtimer.so : TimerFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ TimerFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS)
libtimer.a : TimerFunctions.o $(COMMON_OBJS) 
	$(AR) $@ TimerFunctions.o $(COMMON_OBJS)

libclassifier.so : ClassifierFunctions.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ ClassifierFunctions.o $(COMMON_OBJS) $(EXTRA_LIBS)
libclassifier.a : ClassifierFunctions.o
	$(AR) $@ ClassifierFunctions.o

libpfreq.so : Frequency.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ Frequency.o $(COMMON_OBJS) $(EXTRA_LIBS)
libpfreq.a : Frequency.o
	$(AR) $@ Frequency.o

liblptimer.so : LoopTimer.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ LoopTimer.o $(COMMON_OBJS) $(EXTRA_LIBS)

libtautrace.so : tautrace.o $(COMMON_OBJS)
	$(MPICC) $(SHARED_LIB) -o $@ tautrace.o $(COMMON_OBJS) $(EXTRA_LIBS)
libtautrace.a : tautrace.o
	$(AR) $@ tautrace.o

clean: 
	rm -f *.o *.O *.i *.s *.ii $(LIB_TARGETS)

install:
	cp $(LIB_TARGETS) $(LIBDIR)

