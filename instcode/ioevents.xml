<!-- defines IO events that can be passed to a script that automaticaly generates
     headers and wrappers for them
  -->
  <!-- ioclass class=<IO type> # no data # -->
    <!-- function decl=<function name> ret=<return type> # no data # -->
      <!-- arg type=<C datatype> trace=<IOEvent_t struct entry> # <argument name> #-->
      <!-- special location=<n in [0,1]> # some special handling code # -->
      <!-- trace dest=<IOEvent_t struct entry> # C expr # -->
      <!-- trace_hdr UNDEFINED # some data that gets put into the trace header #-->
<!-- for arg, trace attribute should be one of these
typedef struct {
    uint8_t  class; //autofilled
    uint8_t  offset_class; //autofilled
    uint8_t  handle_class; //autofilled
    uint8_t  mode;
    uint16_t event_type; //autofilled
    uint16_t handle_id;
    uint64_t unqid; //autofilled
    uint64_t source;
    uint64_t size;
    uint64_t offset;
    uint64_t start_time; //autofilled
    uint64_t end_time; //autofilled
} EventInfo_t;
-->

<ioevents>

  <ioclass> POSX
    <function ret="int"> chmod
      <arg type="const char*" file="name"> path </arg>
      <arg type="mode_t"> mode </arg>
    </function>

    <function ret="ssize_t"> write
      <arg type="int" trace="handle_id"> fd </arg>
      <arg type="const void*"> ptr </arg>
      <arg type="size_t" trace="size"> count </arg>
    </function>

    <function ret="ssize_t"> pwrite
      <arg type="int" trace="handle_id"> fd </arg>
      <arg type="const void*"> ptr </arg>
      <arg type="size_t" trace="size"> count </arg>
      <arg type="off_t" trace="offset"> offset </arg>
      <trace dest="offset_class"> IOOffset_SET </trace>
    </function>

    <function ret="ssize_t"> pwrite64
      <arg type="int" trace="handle_id"> fd </arg>
      <arg type="const void*"> ptr </arg>
      <arg type="size_t" trace="size"> count </arg>
      <arg type="off_t" trace="offset"> offset </arg>
      <trace dest="offset_class"> IOOffset_SET </trace>
    </function>

    <function ret="ssize_t"> pread
      <arg type="int" trace="handle_id"> fd </arg>
      <arg type="void*"> buf </arg>
      <arg type="size_t" trace="size"> count </arg>
      <arg type="off_t" trace="offset"> offset </arg>
      <trace dest="offset_class"> IOOffset_SET </trace>
    </function>

    <function ret="ssize_t"> pread64
      <arg type="int" trace="handle_id"> fd </arg>
      <arg type="void*"> buf </arg>
      <arg type="size_t" trace="size"> count </arg>
      <arg type="off_t" trace="offset"> offset </arg>
      <trace dest="offset_class"> IOOffset_SET </trace>
    </function>

    <function ret="ssize_t"> read
      <arg type="int" trace="handle_id"> fd </arg>
      <arg type="void*"> buf </arg>
      <arg type="size_t" trace="size"> count </arg>
    </function>

    <function ret="int"> close
      <arg type="int" trace="handle_id"> fd </arg>
    </function>

    <function ret="int"> open64
      <arg type="const char*" file="handle"> filename </arg>
      <arg type="int"> mode </arg>
      <arg type="int"> flags </arg>
      <trace dest="handle_id"> retval </trace>
    </function>

    <function ret="int"> open
      <arg type="const char*" file="handle"> filename </arg>
      <arg type="int"> mode </arg>
      <arg type="int"> flags </arg>
      <trace dest="handle_id"> retval </trace>
    </function>

    <function ret="int"> stat
      <arg type="const char*" file="name"> pathname </arg>
      <arg type="struct stat*"> buf </arg>
    </function>

    <function ret="int"> creat
      <arg type="const char*" file="handle"> filename </arg>
      <arg type="int"> flags </arg>
      <trace dest="handle_id"> retval </trace>
    </function>
  </ioclass>

  <ioclass> CLIB
    <function ret="int"> fseek
      <arg type="FILE*"> stream </arg>
      <arg type="long int" trace="offset"> offset </arg>
      <arg type="int"> origin </arg>
      <trace dest="offset_class"> offsetOriginToClass(origin) </trace>
      <trace dest="handle_id"> stream->_fileno </trace>
    </function>

    <function ret="size_t"> fwrite
      <arg type="const void*"> ptr </arg>
      <arg type="size_t"> size </arg>
      <arg type="size_t"> count </arg>
      <trace dest="size"> (size * count) </trace>
      <arg type="FILE*"> stream </arg>
      <trace dest="handle_id"> stream->_fileno </trace>
    </function>

    <function ret="int"> fflush
      <arg type="FILE*"> stream </arg>
      <trace dest="handle_id"> stream->_fileno </trace>
    </function>

    <function ret="FILE*"> fopen
      <arg type="const char*" file="handle"> filename </arg>
      <arg type="const char*"> mode </arg>
      <trace dest="handle_id"> retval->_fileno </trace>
    </function>

    <function ret="int"> puts
      <arg type="const char*"> str </arg>
      <trace dest="size"> strlen(str) </trace>
      <trace dest="handle_id"> stdout </trace>
      <trace dest="handle_class"> IOHandle_CLIB </trace>
    </function>

    <function ret="int"> fclose
      <arg type="FILE*"> stream </arg>
      <trace dest="handle_id"> stream->_fileno </trace>
    </function>

    <function ret="size_t"> fread
      <arg type="void*"> ptr </arg>
      <arg type="size_t"> size </arg>
      <arg type="size_t"> count </arg>
      <trace dest="size"> (size * count) </trace>
      <arg type="FILE*"> stream </arg>
      <trace dest="handle_id"> stream->_fileno </trace>
    </function>

    <function ret="int"> fstat
      <arg type="int" trace="handle_id"> fildes </arg>
      <arg type="struct stat*"> buf </arg>
    </function>

    <function ret="int"> fchmod
      <arg type="int" trace="handle_id"> fildes </arg>
      <arg type="mode_t"> mode </arg>
    </function>
  </ioclass>

  <ioclass> MPIO
    <function ret="int"> MPI_File_Open
      <arg type="MPI_Comm"> comm </arg>
      <arg type="char*" file="handle"> filename </arg>
      <arg type="int"> amode </arg>
      <arg type="MPI_Info"> info </arg>
      <arg type="MPI_File*"> fh </arg>
      <trace dest="handle_id"> retval </trace>
    </function>
  </ioclass>

</ioevents>
